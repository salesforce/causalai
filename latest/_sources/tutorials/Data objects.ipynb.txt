{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "df5c2585",
   "metadata": {},
   "source": [
    "# Data Object\n",
    "\n",
    "In order to feed observational data to the causal discovery algorithms in our API, the raw data-- NumPy arrays and a list of variable names (optional), is used to instantiate a CausalAI data object. Note that any data transformation must be applied to the NumPy array prior to instantiating a data object. For time series and tabular data, $\\texttt{TimeSeriesData}$ and $\\texttt{TabularData}$ must be initialized with the aforementioned data respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d34e61c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib\n",
    "from matplotlib import pyplot as plt   \n",
    "import csv\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "754ca0bf",
   "metadata": {},
   "source": [
    "## Time Series Data\n",
    "\n",
    "Let's begin by importing the modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dd2cd19f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from causalai.data.time_series import TimeSeriesData\n",
    "from causalai.data.transforms.time_series import StandardizeTransform, DifferenceTransform, Heterogeneous2DiscreteTransform\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d6a54d7",
   "metadata": {},
   "source": [
    "We will now instantiate a random numpy array and define a data object using our time series data class, and look at its important attributes and methods. Let's say our time series has length 100, and there are 2 variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "60a90b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This time series object has length [100]\n",
      "This time series object has dimensions 2\n",
      "This time series object has variables with names [0, 1]\n"
     ]
    }
   ],
   "source": [
    "data_array = np.random.random((100, 2))\n",
    "\n",
    "data_obj = TimeSeriesData(data_array)\n",
    "print(f'This time series object has length {data_obj.length}')\n",
    "print(f'This time series object has dimensions {data_obj.dim}')\n",
    "print(f'This time series object has variables with names {data_obj.var_names}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb6e26f2",
   "metadata": {},
   "source": [
    "There are a few things to notice:\n",
    "1. We are assuming that both the variables are sampled at the same temporal rate (i.e., the same temporal resolution). We currently do not support time series in which different variables have different temporal resolution.\n",
    "2. Since we did not define any variable names, by default it is enumerated by the variable index values.\n",
    "3. The data object's length is returned as a list. We discuss this below under Multi-Data object.\n",
    "\n",
    "We can alternatively define variable names by passing it to the data object constructor as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb913f1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This time series object has length [100]\n",
      "This time series object has dimensions 2\n",
      "This time series object has variables with names ['A', 'B']\n"
     ]
    }
   ],
   "source": [
    "data_array = np.random.random((100, 2))\n",
    "var_names = ['A', 'B']\n",
    "\n",
    "data_obj = TimeSeriesData(data_array, var_names=var_names)\n",
    "print(f'This time series object has length {data_obj.length}')\n",
    "print(f'This time series object has dimensions {data_obj.dim}')\n",
    "print(f'This time series object has variables with names {data_obj.var_names}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba86de2d",
   "metadata": {},
   "source": [
    "Finally, the data array can be retrieved as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3499e8db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Retrieving data array from the data object and making sure they are exactly the same:\n",
      "(100, 2)\n",
      "(100, 2)\n"
     ]
    }
   ],
   "source": [
    "data_array_ret, = data_obj.data_arrays\n",
    "\n",
    "print('\\nRetrieving data array from the data object and making sure they are exactly the same:')\n",
    "assert (data_array_ret==data_array).all()\n",
    "print(data_array.shape)\n",
    "print(data_array_ret.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "515c95e6",
   "metadata": {},
   "source": [
    "### Multi-Data Object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee3c2cec",
   "metadata": {},
   "source": [
    "In time series case, there can be use cases where we have multiple disjoint time series for the same dataset. For instance, the first time series is from January-March, and the second time series is from July-September. In this case, concatenating the two time series would be incorrect.\n",
    "\n",
    "To support such use cases in our library, one can pass multiple numpy arrays to the data object constructor as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5453bb33",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This time series object has length [100, 24]\n",
      "This time series object has dimensions 2\n",
      "This time series object has variables with names ['A', 'B']\n",
      "\n",
      "Retrieving data array from the data object and making sure they are exactly the same:\n",
      "(100, 2) (24, 2)\n",
      "(100, 2) (24, 2)\n"
     ]
    }
   ],
   "source": [
    "data_array1 = np.random.random((100, 2))\n",
    "data_array2 = np.random.random((24, 2))\n",
    "var_names = ['A', 'B']\n",
    "\n",
    "data_obj = TimeSeriesData(data_array1, data_array2, var_names=var_names)\n",
    "print(f'This time series object has length {data_obj.length}')\n",
    "print(f'This time series object has dimensions {data_obj.dim}')\n",
    "print(f'This time series object has variables with names {data_obj.var_names}')\n",
    "\n",
    "print('\\nRetrieving data array from the data object and making sure they are exactly the same:')\n",
    "data_array1_ret,data_array2_ret = data_obj.data_arrays\n",
    "assert (data_array1_ret==data_array1).all()\n",
    "assert (data_array2_ret==data_array2).all()\n",
    "print(data_array1.shape, data_array2.shape)\n",
    "print(data_array1_ret.shape, data_array2_ret.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66b8be76",
   "metadata": {},
   "source": [
    "It should now be apparent that the data object length is returned as a list so that one can retrieve the individual time series length.\n",
    "\n",
    "As side notes, note that all arrays must have the same number of dimensions, otherwise the object constructor will throw an error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4406774",
   "metadata": {},
   "source": [
    "### Data object Methods"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "258daa82",
   "metadata": {},
   "source": [
    "We list 2 data object methods that may be useful for users. They are:\n",
    "1. var_name2index: This method takes as input variable name, and returns the index of that variable.\n",
    "2. extract_array: Extract the arrays corresponding to the node names X,Y,Z, which are provided as inputs. X and Y are individual nodes, and Z is the set of nodes to be used as the conditional set. More explanation below.\n",
    "\n",
    "First we show below the usage of var_name2index:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1c7a353b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The index of variable B is 1\n"
     ]
    }
   ],
   "source": [
    "print(f\"The index of variable B is {data_obj.var_name2index('B')}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ffee78b",
   "metadata": {},
   "source": [
    "To understand the purpose of the extract_array method, note that in causal discovery, a typical operation is to perform conditioal independence (CI) tests, where conditioned on some set of variables Z, we want to perform independence test between two variables X and Y.\n",
    "\n",
    "To perform these CI tests, a convenient approach is to list the variables X,Y and the set Z by name and their relative time index, and then define a function which returns all the instances of the corresponding variable values. For instance, in the example below, we are interested in performing a CI test between variables X=(B,t) and Y=(A,t-2) conditioned on the variable set Z=[(A, t-1), (B, t-2)], over all the values of t in the given time series dataset. Note that we follow the naming conventions below: \n",
    "1. X is the variable B at the current time t. Since it is always t, we drop the time index and simply pass the variable name string.\n",
    "2. Y is the variable A from the time steps t-2 relative to X. We drop the character t, and specify this choice as (A,-2).\n",
    "3. Each time indexed variable inside the list Z follows the same naming convention as specified above for Y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "00b3ba9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_array = np.random.random((5, 2))\n",
    "var_names = ['A', 'B']\n",
    "data_obj = TimeSeriesData(data_array, var_names=var_names)\n",
    "\n",
    "X = 'B'\n",
    "Y = ('A', -2)\n",
    "Z = [('A', -1), ('B', -2)]\n",
    "\n",
    "x,y,z = data_obj.extract_array(X,Y,Z, max_lag=3)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4dd543a",
   "metadata": {},
   "source": [
    "To understand the outputs x,y,z above, we print below the time series and these outputs with each element labeled with their respective variable name and time index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a51259c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_array = [\n",
      "[A(t-4): 0.08, B(t-4): 0.49],\n",
      "[A(t-3): 0.44, B(t-3): 0.08],\n",
      "[A(t-2): 0.40, B(t-2): 0.34],\n",
      "[A(t-1): 0.76, B(t-1): 0.13],\n",
      "[A(t-0): 0.54, B(t-0): 0.62],\n",
      "]\n",
      "\n",
      "X = B\n",
      "x = [\n",
      "[B(t-1): 0.13],\n",
      "[B(t-0): 0.62],\n",
      "]\n",
      "\n",
      "Y = ('A', -2)\n",
      "y = [\n",
      "[A(t-3): 0.44],\n",
      "[A(t-2): 0.40],\n",
      "]\n",
      "\n",
      "Z = [('A', -1), ('B', -2)]\n",
      "z = [\n",
      "[A(t-2): 0.40, B(t-3): 0.08],\n",
      "[A(t-1): 0.76, B(t-2): 0.34],\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data_array = data_obj.data_arrays[0]\n",
    "T=data_array.shape[0]\n",
    "print('data_array = [')\n",
    "for i in range(data_array.shape[0]):\n",
    "    print(f'[A(t-{T-i-1}): {data_array[i][0]:.2f}, B(t-{T-i-1}): {data_array[i][1]:.2f}],')\n",
    "print(']')\n",
    "\n",
    "\n",
    "\n",
    "T=x.shape[0]\n",
    "print(f'\\nX = {X}\\nx = [')\n",
    "for i in range(x.shape[0]):\n",
    "    print(f'[{X}(t-{T-i-1}): {x[i]:.2f}],')\n",
    "print(']')\n",
    "\n",
    "print(f'\\nY = {Y}\\ny = [')\n",
    "for i in range(x.shape[0]):\n",
    "    print(f'[{Y[0]}(t-{T-i-1-Y[1]}): {y[i]:.2f}],')\n",
    "print(']')\n",
    "\n",
    "print(f'\\nZ = {Z}\\nz = [')\n",
    "for i in range(x.shape[0]):\n",
    "    print(f'[{Z[0][0]}(t-{T-i-1-Z[0][1]}): {z[i][0]:.2f}, {Z[1][0]}(t-{T-i-1-Z[1][1]}): {z[i][1]:.2f}],')\n",
    "print(']')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d2a3db0",
   "metadata": {},
   "source": [
    "Notice that the number of rows in x,y,z are the same and for any given row index, their values correspond to the variable names and relative time index specified. These arrays can now be use to perform CI tests. Our causal discovery models use this method internally, but they can be used directly if needed as well.\n",
    "\n",
    "On a final note, if the specified list Z contains nodes whose relative lag is more than the value of max_lag, they will be ignored. For instance, if Z contains ('A', -4) and max_lag=3, then this node will be removed from Z prior to computing the z array."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b466ed5b",
   "metadata": {},
   "source": [
    "## Tabular Data\n",
    "\n",
    "The tabular data object behaves similarly to the time series object. The modules for the tabular case are as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "69f4fa59",
   "metadata": {},
   "outputs": [],
   "source": [
    "from causalai.data.tabular import TabularData\n",
    "from causalai.data.transforms.tabular import StandardizeTransform, Heterogeneous2DiscreteTransform"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71876415",
   "metadata": {},
   "source": [
    "## Data Pre-processing\n",
    "\n",
    "The common data pre-processing transforms for both time series and tabular data are StandardizeTransform and Heterogeneous2DiscreteTransform. They can be imported respectively as follows:\n",
    "\n",
    "1. Time series:\n",
    "\n",
    "from causalai.data.transforms.time_series import StandardizeTransform, Heterogeneous2DiscreteTransform\n",
    "\n",
    "2. Tabular:\n",
    "\n",
    "from causalai.data.transforms.tabular import StandardizeTransform, Heterogeneous2DiscreteTransform\n",
    "\n",
    "They function identically and may even be used interchangeably, but are supported under tabular and time_series modules for clarity.\n",
    "\n",
    "**StandardizeTransform**: Transforms each column of the data provided as Numpy arrays to have zero mean and unit variance. Ingores NaNs. Useful for continuous data.\n",
    "\n",
    "**Heterogeneous2DiscreteTransform**: If the user data is heterogeneous, i.e., some variables are discrete while others are continuous, the supported causal discovery algorithms will not function properly. In order to support heterogeneous data, the Heterogeneous2DiscreteTransform can be used to make all the variables discrete, and then causal discovery algorithms that support discrete data can be used. The number of states to be used for discretization can be specified in the module.\n",
    "\n",
    "\n",
    "In addition to the above transforms, for time series data, CausalAI also supports DifferenceTransform, which can be imported as follows:\n",
    "\n",
    "from causalai.data.transforms.time_series import DifferenceTransform\n",
    "\n",
    "**DifferenceTransform**:  Transform time series data by taking the difference between two time steps that are a certain interval apart specified by the argument order. May be used for both continuous and discrete time series data, if required.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf5d279a",
   "metadata": {},
   "source": [
    "### StandardizeTransform\n",
    "\n",
    "Transforms each column of the data to have zero mean and unit variance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "52489637",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimension-wise mean of the original data array: [0.47513212 0.48655998]\n",
      "Dimension-wise mean of the transformed data array: [4.15223411e-16 2.23154828e-16].\n",
      "Notice that this is close to 0.\n",
      "\n",
      "Dimension-wise standard deviation of the original data array: [0.29770807 0.28400914]\n",
      "Dimension-wise standard deviation of the transformed data array: [0.99999944 0.99999938]. \n",
      "Notice that this is close to 1.\n"
     ]
    }
   ],
   "source": [
    "from causalai.data.transforms.time_series import StandardizeTransform, Heterogeneous2DiscreteTransform\n",
    "\n",
    "data_array = np.random.random((100, 2))\n",
    "\n",
    "StandardizeTransform_ = StandardizeTransform()\n",
    "StandardizeTransform_.fit(data_array)\n",
    "\n",
    "data_train_trans = StandardizeTransform_.transform(data_array)\n",
    "\n",
    "\n",
    "print(f'Dimension-wise mean of the original data array: {data_array.mean(0)}')\n",
    "print(f'Dimension-wise mean of the transformed data array: {data_train_trans.mean(0)}.'\\\n",
    "      f'\\nNotice that this is close to 0.')\n",
    "\n",
    "print(f'\\nDimension-wise standard deviation of the original data array: {data_array.std(0)}')\n",
    "print(f'Dimension-wise standard deviation of the transformed data array: {data_train_trans.std(0)}.'\\\n",
    "      f' \\nNotice that this is close to 1.')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "616e8f62",
   "metadata": {},
   "source": [
    "The standard transform class automatically ignores NaNs in the array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a94c5dfe",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Array: \n",
      "[[       nan 0.80518464]\n",
      " [       nan 0.45221782]\n",
      " [0.24987259 0.61744902]\n",
      " [0.5178477  0.48176765]\n",
      " [0.67053628 0.14881708]\n",
      " [0.40713205 0.33657983]\n",
      " [0.69268823 0.39474171]\n",
      " [0.40225941 0.28154496]\n",
      " [0.79705495 0.89939579]\n",
      " [0.1331715  0.94285576]]\n",
      "\n",
      "Transformed Array: \n",
      "[[        nan  1.04677208]\n",
      " [        nan -0.32608451]\n",
      " [-1.09081273  0.31657859]\n",
      " [ 0.15865713 -0.2111511 ]\n",
      " [ 0.8705881  -1.50615494]\n",
      " [-0.3575694  -0.77585589]\n",
      " [ 0.9738745  -0.54963655]\n",
      " [-0.38028876 -0.9899128 ]\n",
      " [ 1.46049832  1.41320427]\n",
      " [-1.63494715  1.58224086]]\n",
      "\n",
      "Below we print the mean and standard deviation of the 0th column after ignoring the 1st 2 elements:\n",
      "\n",
      "Dimension-wise mean of the original data array: 0.4838203392232694\n",
      "Dimension-wise mean of the transformed data array: -1.3877787807814457e-16.\n",
      "Notice that this is close to 0.\n",
      "\n",
      "Dimension-wise standard deviation of the original data array: 0.21447081975778504\n",
      "Dimension-wise standard deviation of the transformed data array: 0.9999989129916689. \n",
      "Notice that this is close to 1.\n"
     ]
    }
   ],
   "source": [
    "data_array = np.random.random((10, 2))\n",
    "data_array[:2,0] = math.nan\n",
    "\n",
    "StandardizeTransform_ = StandardizeTransform()\n",
    "StandardizeTransform_.fit(data_array)\n",
    "\n",
    "data_train_trans = StandardizeTransform_.transform(data_array)\n",
    "\n",
    "print(f'Original Array: ')\n",
    "print(data_array)\n",
    "\n",
    "print(f'\\nTransformed Array: ')\n",
    "print(data_train_trans)\n",
    "\n",
    "print('\\nBelow we print the mean and standard deviation of the 0th column after ignoring the 1st 2 elements:')\n",
    "\n",
    "print(f'\\nDimension-wise mean of the original data array: {data_array[2:,0].mean(0)}')\n",
    "print(f'Dimension-wise mean of the transformed data array: {data_train_trans[2:,0].mean(0)}.'\\\n",
    "      f'\\nNotice that this is close to 0.')\n",
    "\n",
    "print(f'\\nDimension-wise standard deviation of the original data array: {data_array[2:,0].std(0)}')\n",
    "print(f'Dimension-wise standard deviation of the transformed data array: {data_train_trans[2:,0].std(0)}.'\\\n",
    "      f' \\nNotice that this is close to 1.')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70bfce0c",
   "metadata": {},
   "source": [
    "On a final note, the causal discovery algorithms automatically handles NaN instances internally as well."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60ea950c",
   "metadata": {},
   "source": [
    "### Heterogeneous2DiscreteTransform\n",
    "\n",
    "Transforms an array of mixed continuous and discrete variables to a discrete array. The discrete variable values are not affected by the transformation. The number of states to be used for discretization can be specified in the module.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bc880db0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['c1', 'c2', 'd1', 'd2', 'd3']\n",
      "[[-0.35585766  0.18792482  0.          1.          1.        ]\n",
      " [ 1.16930377  0.2151256   0.          0.          1.        ]\n",
      " [ 0.32261274  1.2809729   1.          0.          1.        ]\n",
      " [-1.09150846  0.09236801  1.          0.          0.        ]\n",
      " [-0.64023739  0.35585544  1.          1.          1.        ]\n",
      " [-1.10937773  0.97013573  1.          0.          1.        ]\n",
      " [-0.51653727  0.76753388  1.          0.          1.        ]\n",
      " [ 0.71953692 -0.49171197  0.          0.          0.        ]\n",
      " [ 2.02864175 -0.17647864  0.          1.          0.        ]\n",
      " [-0.94696578 -0.39476729  0.          0.          1.        ]]\n"
     ]
    }
   ],
   "source": [
    "from causalai.data.transforms.tabular import Heterogeneous2DiscreteTransform\n",
    "\n",
    "data_c = np.random.randn(10,2)\n",
    "data_d = np.random.randint(0,2, (10,3))\n",
    "data_array = np.concatenate([data_c, data_d], axis=1)\n",
    "var_names = ['c1', 'c2', 'd1', 'd2', 'd3']\n",
    "print(var_names)\n",
    "print(data_array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "04e0c321",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2. 2. 0. 1. 1.]\n",
      " [4. 2. 0. 0. 1.]\n",
      " [3. 4. 1. 0. 1.]\n",
      " [0. 1. 1. 0. 0.]\n",
      " [1. 3. 1. 1. 1.]\n",
      " [0. 4. 1. 0. 1.]\n",
      " [2. 3. 1. 0. 1.]\n",
      " [3. 0. 0. 0. 0.]\n",
      " [4. 1. 0. 1. 0.]\n",
      " [1. 0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "discrete = {'c1': False, 'c2': False, 'd1': True, 'd2': True, 'd3': True}\n",
    "Heterogeneous2DiscreteTransform_ = Heterogeneous2DiscreteTransform(nstates=5)# specify number of states\n",
    "Heterogeneous2DiscreteTransform_.fit(data_array, var_names=var_names, discrete=discrete)\n",
    "data_transformed = Heterogeneous2DiscreteTransform_.transform(data_array)\n",
    "print(data_transformed)\n",
    "assert np.all(data_array[:,2:]==data_transformed[:,2:]),\\\n",
    "            f'Something went wrong. Discrete data before and after do not match!'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9a9d540",
   "metadata": {},
   "source": [
    "### DifferenceTransform\n",
    "\n",
    "Transform time series data by taking the difference between two time steps that are a certain interval apart specified by the argument order. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "51a81f1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.71034335 -0.77817239]\n",
      " [ 0.41208121 -0.44224965]\n",
      " [ 0.16667321  0.42001276]\n",
      " [-0.46039254  0.53315306]\n",
      " [-0.8463023  -1.20623272]\n",
      " [ 1.12214032  0.55983087]\n",
      " [ 0.19491086  1.38217805]\n",
      " [-0.80278812  0.86078342]\n",
      " [-1.24378886  0.19386542]\n",
      " [ 0.26081174 -1.33093553]]\n"
     ]
    }
   ],
   "source": [
    "from causalai.data.transforms.time_series import DifferenceTransform\n",
    "\n",
    "data_array = np.random.randn(10,2)\n",
    "print(data_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b72391ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.29826214,  0.33592274],\n",
       "       [-0.245408  ,  0.86226242],\n",
       "       [-0.62706575,  0.1131403 ],\n",
       "       [-0.38590976, -1.73938578],\n",
       "       [ 1.96844262,  1.76606359],\n",
       "       [-0.92722946,  0.82234718],\n",
       "       [-0.99769898, -0.52139463],\n",
       "       [-0.44100073, -0.666918  ],\n",
       "       [ 1.5046006 , -1.52480095]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DifferenceTransform_ = DifferenceTransform(order=1) # difference b/w consecutive time steps\n",
    "DifferenceTransform_.transform(data_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "14c3b8de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.54367014,  1.19818515],\n",
       "       [-0.87247375,  0.97540272],\n",
       "       [-1.01297551, -1.62624548],\n",
       "       [ 1.58253286,  0.0266778 ],\n",
       "       [ 1.04121316,  2.58841077],\n",
       "       [-1.92492844,  0.30095255],\n",
       "       [-1.43869972, -1.18831263],\n",
       "       [ 1.06359986, -2.19171895]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DifferenceTransform_ = DifferenceTransform(order=2) # difference b/w every 2 time steps\n",
    "DifferenceTransform_.transform(data_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27aaae3a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
